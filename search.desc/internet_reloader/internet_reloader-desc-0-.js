searchState.loadedDescShard("internet_reloader", 0, "A Rust application to monitor internet connectivity, and …\nModule for the main application logic.\nModule for checking internet connectivity.\nModule for managing network connections.\nConnected to both network and internet\nNot connected to network\nThe main application struct that uses the …\nConnected to network but not internet\nRepresents the network status.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new instance of <code>NetworkApp</code>`.\nPolls the network status and attempts to reconnect if …\nTrait for checking internet connectivity.\nImplementation of <code>InternetConnectivity</code> for Windows OS.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if the system is connected to the internet.\nChecks if the system is connected to a network.\nTrait for managing network connections.\nImplementation of <code>NetworkManager</code> for Windows OS.\nTrait to abstract Windows WLAN API calls.\nConcrete implementation of the <code>WlanApi</code> trait using actual …\nCloses a handle to the WLAN API.\nConnects the specified wireless LAN interface to a network.\nCreates a new instance of <code>WindowsNetworkManager</code>`.\nDisconnects the specified wireless LAN interface from the …\nEnumerates the wireless LAN interfaces on the local …\nFrees memory allocated by the WLAN API.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new instance of <code>WindowsNetworkManager</code>`.\nOpens a handle to the WLAN API.\nQueries information about the specified wireless LAN …\nAttempts to reconnect to the network.")